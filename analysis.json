{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A list of history requests in the ARC main menu.\n\nThe element uses direct implementation of the PouchDB to make a query to the\ndatastore. It also listens to events fired by the `arc-model` elements to\nupdate state of the history requests.\n\n### Example\n```\n<history-menu></history-menu>\n```\n\n### Sizing the element\n\nThe element uses `<iron-list>` to render the data in the view. The list is set\nto be flex vertically. It means that the element has to be sized directly by the\nhosting application or otherwise it size will be 0px.\n\nIt can be done using flex layout and making the element to be `flex: 1`.\n\n## Required dependencies\n\nThe element works with `@advanced-rest-client/arc-models/request-model.js`\ncomponent. It should be included into the DOM.\n\n### Styling\n`<history-menu>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--history-menu-background-color` | Background color of the menu | `inherit`\n`--history-menu-selected-post-method-color` | Font color of selected item POST method label | `#fff`\n`--history-menu-focused-post-method-color` | Font color of focused item POST method label | `rgb(33, 150, 243)`\n`--history-menu-selected-method-label-background-color` | Bg color of the POST method when focused | `#fff`\n`--history-menu-selected-item-background-color` | Background color of the selected list item | `#FF9800`\n`--history-menu-selected-item-color` | Color of the selected list item | `#fff`\n`--history-menu-history-group-header-font-weigth` | Group header border color | `bold`\n`--history-menu-history-group-header-border-color` | Group header border color | `#ddd`\n`--history-menu-history-group-header-color` | Font color of the group header` | `rgba(0, 0, 0, 0.54)`\n`--arc-menu-empty-info-color` | Color applied to the empty info section | ``\n`--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``",
      "summary": "",
      "path": "history-menu.js",
      "properties": [
        {
          "name": "selectedItem",
          "type": "string | null | undefined",
          "description": "Database ID of the selected item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "draggableEnabled",
          "type": "boolean | null | undefined",
          "description": "Adds draggable property to the request list item element.\nThe `dataTransfer` object has `arc/request-object` mime type with\nserialized JSON with request model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 53
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeItemClass",
          "description": "Computes class name for the HTML element representing a history item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String"
            },
            {
              "name": "selectedItem",
              "type": "String"
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_scrollHandler",
          "description": "Called every time the element changed it's scroll position. It will call the `makeQuery`\nfunction when there's less than 120px left to scroll. (also it must be opened and must not\nalready querying).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "notifyResize",
          "description": "Notifies the list that the resize event occurred.\nShould be called whhen content of the list changed but the list wasn't\nvisible at the time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_openHistory",
          "description": "Handler for the `click` event on the item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 241,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "ClickEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dragStart",
          "description": "Handler for the `dragstart` event added to the list item when `draggableEnabled`\nis set to true.\nThis function sets request data on the `dataTransfer` object with `arc/request-object`\nmime type. The request data is a serialized JSON with request model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 259,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDraggableValue",
          "description": "Computes value for the `draggable` property of the list item.\nWhen `draggableEnabled` is set it returns true which is one of the\nconditions to enable drag and drop on an element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 2
            },
            "end": {
              "line": 269,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "draggableEnabled",
              "type": "Boolean",
              "description": "Current value of `draggableEnabled`"
            }
          ],
          "return": {
            "type": "String",
            "desc": "`true` or `false` (as string) depending on the argument."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 73,
          "column": 0
        },
        "end": {
          "line": 270,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.HistoryMenu",
      "attributes": [
        {
          "name": "selected-item",
          "description": "Database ID of the selected item.",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "draggable-enabled",
          "description": "Adds draggable property to the request list item element.\nThe `dataTransfer` object has `arc/request-object` mime type with\nserialized JSON with request model.",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 53
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "history-menu",
      "mixins": [
        "RequestsListMixin",
        "HistoryListMixin"
      ]
    }
  ]
}
